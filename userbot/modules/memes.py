# Copyright (C) 2019 The Raphielscape Company LLC.
#
# Licensed under the Raphielscape Public License, Version 1.c (the "License");
# you may not use this file except in compliance with the License.
#

# Turhan UserBot - Yusuf Usta


""" ƒ∞nsanlarla eƒülenmek i√ßin yapƒ±lmƒ±≈ü olan UserBot mod√ºl√º. """

from asyncio import sleep
from random import choice, getrandbits, randint
from re import sub
import time
import asyncio

from collections import deque

import requests

from cowpy import cow

from userbot import CMD_HELP, ZALG_LIST
from userbot.events import register
from userbot.modules.admin import get_user_from_event

# ================= CONSTANT =================
EMOJIS = [
    "üòÇ",
    "üòÇ",
    "üëå",
    "‚úå",
    "üíû",
    "üëç",
    "üëå",
    "üíØ",
    "üé∂",
    "üëÄ",
    "üòÇ",
    "üëì",
    "üëè",
    "üëê",
    "üçï",
    "üí•",
    "üç¥",
    "üí¶",
    "üí¶",
    "üçë",
    "üçÜ",
    "üò©",
    "üòè",
    "üëâüëå",
    "üëÄ",
    "üëÖ",
    "üò©",
    "üö∞",
]

UWUS = [
    "(„Éª`œâ¬¥„Éª)",
    ";;w;;",
    "owo",
    "UwU",
    ">w<",
    "^w^",
    r"\(^o\) (/o^)/",
    "( ^ _ ^)‚à†‚òÜ",
    "(√¥_√¥)",
    "~:o",
    ";-;",
    "(*^*)",
    "(>_",
    "(‚ô•_‚ô•)",
    "*(^O^)*",
    "((+_+))",
]

FACEREACTS = [
    " ò‚Äø ò",
    "„Éæ(-_- )„Çû",
    "(„Å£Àò⁄°ÀòœÇ)",
    "(¬¥–∂ÔΩÄœÇ)",
    "( ‡≤†  ñÃØ ‡≤†)",
    "(¬∞ Õú ñÕ°¬∞)‚ï≠‚à©‚ïÆ",
    "(·µü‡∫∂Ô∏µ ·µü‡∫∂)",
    "(‡∏á„ÉÑ)‡∏ß",
    " ö(‚Ä¢ÔΩÄ",
    "(„Å£‚ñÄ¬Ø‚ñÄ)„Å§",
    "(‚ó†Ôπè‚ó†)",
    "( Õ°‡≤†  ñÃØ Õ°‡≤†)",
    "( ‡∞† Õü ñ ‡∞†)",
    "(‚à©ÔΩÄ-¬¥)‚äÉ‚îÅ‚òÜÔæü.*ÔΩ•ÔΩ°Ôæü",
    "(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ",
    "(._.)",
    "{‚Ä¢ÃÉ_‚Ä¢ÃÉ}",
    "(·µî·¥•·µî)",
    "‚ô®_‚ô®",
    "‚•Ä.‚•Ä",
    "ÿ≠Àö‡Ø∞Àö„Å• ",
    "(“Ç‚ó°_‚ó°)",
    "∆™(⁄ì◊≤)‚Äé∆™‚Äã‚Äã",
    "(„Å£‚Ä¢ÃÅÔΩ°‚Ä¢ÃÅ)‚ô™‚ô¨",
    "‚óñ·µî·¥•·µî‚óó ‚ô™ ‚ô´ ",
    "(‚òûÔæü„ÉÆÔæü)‚òû",
    "[¬¨¬∫-¬∞]¬¨",
    "(‘æ‚Ä∏ ‘æ)",
    "(‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà ÃëÃë",
    "„Éæ(¬¥„Äá`)Ôæâ‚ô™‚ô™‚ô™",
    "(‡∏á'ÃÄ-'ÃÅ)‡∏á",
    "·Éö(‚Ä¢ÃÅ‚Ä¢ÃÅ·Éö)",
    " ï ‚Ä¢ÃÅÿà‚Ä¢ÃÄ ‚Çé",
    "‚ô™‚ô™ „ÉΩ(Àá‚àÄÀá )„Çû",
    "—âÔºàÔæü–îÔæü—âÔºâ",
    "( Àá‡∑¥Àá )",
    "Îàà_Îàà",
    "(‡πë‚Ä¢ÃÅ ‚ÇÉ ‚Ä¢ÃÄ‡πë) ",
    "( Àò ¬≥Àò)‚ô• ",
    "‘Ö(‚âñ‚Äø‚âñ‘Ö)",
    "‚ô•‚Äø‚ô•",
    "‚óî_‚óî",
    "‚ÅΩ‚ÅΩ‡¨ò( Àä·µïÀã )‡¨ì‚Åæ‚Åæ",
    "‰πÅ( ‚óî ‡±™‚óî)„Äå      ‚îë(Ôø£–î Ôø£)‚îç",
    "( ‡∞†‡µ†‡∞† )Ôæâ",
    "Ÿ©(‡πè_‡πè)€∂",
    "‚îå(„ÜÜ„â®„ÜÜ) É",
    "‡∞†_‡∞†",
    "(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•",
    "(„Éé‡≤† ‚à©‡≤†)„ÉéÂΩ°( \\o¬∞o)\\",
    "‚Äú„ÉΩ(¬¥‚ñΩÔΩÄ)„Éé‚Äù",
    "‡ºº ‡ºé‡∫∂ ‡∑¥ ‡ºé‡∫∂‡ºΩ",
    "ÔΩ°Ôæü( Ôæü‡Æá‚Ä∏‡ÆáÔæü)ÔæüÔΩ°",
    "(„Å•Ôø£ ¬≥Ôø£)„Å•",
    "(‚äô.‚òâ)7",
    "·ïï( ·êõ )·ïó",
    "t(-_-t)",
    "(‡≤•‚å£‡≤•)",
    "„ÉΩ‡ºº ‡≤†Áõä‡≤† ‡ºΩÔæâ",
    "‡ºº‚àµ‡ºΩ ‡ºº‚ç®‡ºΩ ‡ºº‚ç¢‡ºΩ ‡ºº‚ç§‡ºΩ",
    "„Éü‚óèÔπè‚òâ„Éü",
    "(‚äô_‚óé)",
    "¬ø‚ìß_‚ìßÔÆå",
    "‡≤†_‡≤†",
    "(¬¥ÔΩ•_ÔΩ•`)",
    "·ï¶(√≤_√≥Àá)·ï§",
    "‚äôÔπè‚äô",
    "(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª",
    r"¬Ø\_(‚äôÔ∏ø‚äô)_/¬Ø",
    "Ÿ©‚óîÃØ‚óî€∂",
    "¬∞‚Äø‚Äø¬∞",
    "·ïô(‚áÄ‚Ä∏‚Üº‚Ä∂)·ïó",
    "‚äÇ(‚óâ‚Äø‚óâ)„Å§",
    "V‚Ä¢·¥•‚Ä¢V",
    "q(‚ùÇ‚Äø‚ùÇ)p",
    "‡≤•_‡≤•",
    "‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö",
    "‡≤•Ôπè‡≤•",
    "Ôºà ^_^ÔºâoËá™Ëá™oÔºà^_^ Ôºâ",
    "‡≤†‚Äø‡≤†",
    "„ÉΩ(¬¥‚ñΩ`)/",
    "·µí·¥•·µí#",
    "( Õ°¬∞ Õú ñ Õ°¬∞)",
    "‚î¨‚îÄ‚î¨Ôªø „Éé( „Çú-„Çú„Éé)",
    "„ÉΩ(¬¥„ÉºÔΩÄ)„Éé",
    "‚òú(‚åí‚ñΩ‚åí)‚òû",
    "Œµ=Œµ=Œµ=‚îå(;*¬¥–î`)Ôæâ",
    "(‚ï¨ ‡≤†Áõä‡≤†)",
    "‚î¨‚îÄ‚î¨‚É∞Õ°‚Äá(·µî·µï·µîÕú‚Äá)",
    "‚îª‚îÅ‚îª Ô∏µ„ÉΩ(`–î¬¥)ÔæâÔ∏µÔªø ‚îª‚îÅ‚îª",
    r"¬Ø\_(„ÉÑ)_/¬Ø",
    " ï·µî·¥•·µî î",
    "(`ÔΩ•œâÔΩ•¬¥)",
    " ï‚Ä¢·¥•‚Ä¢ î",
    "·Éö(ÔΩÄ„Éº¬¥·Éö)",
    " ï òÃÖÕú òÃÖ î",
    "Ôºà„ÄÄÔæü–îÔæüÔºâ",
    r"¬Ø\(¬∞_o)/¬Ø",
    "(ÔΩ°‚óï‚Äø‚óïÔΩ°)",
]

RUNS_STR = [
    "Hey! Nereye gidiyorsun?",
    "Ha? Ne? ka√ßtƒ±lar mƒ±?",
    "ZZzzZZzz... Noldu? oh, yine onlarmƒ±≈ü, bo≈üver.",
    "Geri gel!",
    "Ka√ßƒ±n OneBot geliyor !!",
    "Duvara dikkat et!",
    "Beni onlarla sakƒ±n yalnƒ±z bƒ±rakma!!",
    "Ka√ßarsan, √∂l√ºrs√ºn.",
    "≈ûakacƒ± seni, Ben heryerdeyim.",
    "Bunu yaptƒ±ƒüƒ±na pi≈üman olacaksƒ±n...",
    "/kickme tu≈üunuda deneyebilirsin, Eƒülenceli olduƒüunu s√∂yl√ºyorlar.",
    "Git ba≈üka birini rahatsƒ±z et, burda kimse takmƒ±yor.",
    "Ka√ßabilirsin ama saklanamazsƒ±n.",
    "Yapabildiklerin bunlar mƒ±?",
    "Arkandayƒ±m...",
    "Misafirlerin var!",
    "Bunu kolay yoldan yapabiliriz, yada zor yoldan.",
    "Anlamƒ±yorsun, deƒüil mi?",
    "Haha, ka√ßsan iyi edersin.!",
    "L√ºtfen, hatƒ±rlat bana ne kadar aldƒ±rƒ±yorum?",
    "Senin yerinde olsam daha hƒ±zlƒ± ka√ßardƒ±m.",
    "Bu kesinlikle aradƒ±ƒüƒ±mƒ±z robot.",
    "Belki ≈üans sana g√ºler.",
    "√únl√º son s√∂zler.",
    "Ve sonsuza dek yok oldular, hi√ß g√∂r√ºnmediler.",
    "\"Hey, bana bakƒ±n! Bottan ka√ßabiliyorum √ßok havalƒ±yƒ±m!\" - bu ki≈üi",
    "Evet evet, /kickme tu≈üuna ≈üimdiden bas.",
    "ƒ∞≈üte, bu y√ºz√ºƒü√º alƒ±n ve Mordor'a gidin.",
    "Efsaneye g√∂re onlar hala √ßalƒ±≈üƒ±yor...",
    "Harry Potter'ƒ±n aksine, ebeveynlerin seni benden koruyamaz.",
    "Korku √∂fkeye, √∂fke nefrete, nefret acƒ±ya yol a√ßar. Korku i√ßinde ka√ßmaya devam edersen,"
    "bir sonraki Vader sen olabilirsin.",
    "Birden fazla hesaplama yapƒ±ldƒ±ktan sonra, dalaverelerine olan ilgimin tam olarak 0 olduƒüuna karar verdim.",
    "Efsaneye g√∂re onlar hala √ßalƒ±≈üƒ±yor.",
    "Devam et, seni burda istediƒüimize emin deƒüilim.",
    "Sen bir sihirb- Oh. Bekle. Sen Harry deƒüilsin, devam et.",
    "KORƒ∞DORDA KO≈ûMAYIN!",
    "G√∂r√º≈ü√ºr√ºz bebeƒüim.",
    "Kim k√∂pekleri saldƒ±?",
    "Komik √ß√ºnk√º kimse takmƒ±yor.",
    "Ah, ne b√ºy√ºk kayƒ±p. Bu seferkini sevmi≈ütim.",
    "A√ßƒ±kcasƒ± canƒ±m, umrumda deƒüil.",
    "S√ºt√ºm t√ºm erkekleri avluya √ßekiyor... Daha hƒ±zlƒ± ko≈ü!",
    "Ger√ßeƒüi KALDIRAMAZSIN!",
    "Uzun zaman √∂nce, √ßok √ßok uzaktaki bir galakside birileri takabilirdi. Ama artƒ±k deƒüil.",
    "Hey, onlara bak! Ka√ßƒ±nƒ±lmaz banhammer'dan ka√ßƒ±yorlar... Ne kadarda tatlƒ±.",
    "Han √∂nce vuruldu. Ben de √∂yle yapacaƒüƒ±m",
    "Beyaz tav≈üanƒ±n, arkasƒ±nda ne yapƒ±yorsun?",
    "Doktorunda s√∂yleyeceƒüi gibi... KA√á!",
]

HELLOSTR = [
    "Merhaba!",
    "‚ÄòNaber M√ºd√ºr!",
    "Nasƒ±lsƒ±n‚Äô?",
    "‚ÄòHey N'oluyor?",
    "Selam, selam, selam!",
    "Merhaba, kim var orada?, Ben konu≈üuyorum.",
    "Bunun kim oldugunu biliyorsun",
    "Hey Yo!",
    "N'aber.",
    "Selamlar ve selamlar!",
    "Merhaba, g√ºnƒ±≈üƒ±ƒüƒ±!",
    "Hey, n'aber, merhaba!",
    "Nasƒ±l gidiyor‚Äô, k√º√ß√ºk civciv?",
    "Ce-e!",
    "Naber-doody!",
    "Selam, birinci sƒ±nƒ±f veledi!",
    "Barƒ±≈üalƒ±m!",
    "Selam, dostum!",
    "M-merhaba!",
]

SHGS = [
    "‚îê(¬¥–¥ÔΩÄ)‚îå",
    "‚îê(¬¥ÔΩûÔΩÄ)‚îå",
    "‚îê(¬¥„ÉºÔΩÄ)‚îå",
    "‚îê(Ôø£„ÉòÔø£)‚îå",
    "‚ïÆ(‚ïØ‚àÄ‚ï∞)‚ï≠",
    "‚ïÆ(‚ïØ_‚ï∞)‚ï≠",
    "‚îê(¬¥–¥`)‚îå",
    "‚îê(¬¥‚àÄÔΩÄ)‚îå",
    " Ö(ÃÅ‚ó°‚óù) É",
    "‚îê(ÔæüÔΩûÔæü)‚îå",
    "‚îê('–¥')‚îå",
    "‚îê(‚ÄòÔΩû`;)‚îå",
    "„Éò(¬¥ÔºçÔΩÄ;)„Éò",
    "‚îê( -‚Äú-)‚îå",
    " ÖÔºà¬¥‚óî‡±™‚óîÔºâ É",
    "„ÉΩ(„ÇúÔΩû„Çúo)„Éé",
    "„ÉΩ(~ÔΩû~ )„Éé",
    "‚îê(~„Éº~;)‚îå",
    "‚îê(-„ÄÇ„Éº;)‚îå",
    r"¬Ø\_(„ÉÑ)_/¬Ø",
    r"¬Ø\_(‚äô_ ñ‚äô)_/¬Ø",
    r"¬Ø\_‡ºº ‡≤• ‚Äø ‡≤• ‡ºΩ_/¬Ø",
    "‰πÅ( ‚Å∞Õ°  ƒπÃØ ‚Å∞Õ° ) „Ñè",
]

CRI = [
    "ÿ£‚Äøÿ£",
    "‚ï•Ôπè‚ï•",
    "(;Ôπè;)",
    "(ToT)",
    "(‚î≥–î‚î≥)",
    "(‡≤•Ôπè‡≤•)",
    "ÔºàÔºõ„Å∏ÔºöÔºâ",
    "(TÔºøT)",
    "ÔºàœÄ„ÉºœÄÔºâ",
    "(Ôº¥‚ñΩÔº¥)",
    "(‚ãüÔπè‚ãû)",
    "ÔºàÔΩâ–îÔΩâÔºâ",
    "(¬¥–î‚äÇ„ÉΩ",
    "(;–î;)",
    "Ôºà>Ôπè<Ôºâ",
    "(T–¥T)",
    "(„Å§Ôπè‚äÇ)",
    "‡ºº‚òØÔπè‚òØ‡ºΩ",
    "(„ÉéÔπè„ÉΩ)",
    "(„ÉéA„ÉΩ)",
    "(‚ï•_‚ï•)",
    "(T‚åìT)",
    "(‡ºé‡∫∂‚åë‡ºé‡∫∂)",
    "(‚òçÔπè‚Å∞)ÔΩ°",
    "(‡≤•_ ñ‡≤•)",
    "(„Å§–¥‚äÇ)",
    "(‚âñÕû_‚âñÃ•)",
    "(‡ÆáÔπè‡Æá`ÔΩ°)",
    "‡ºº‡≤¢_‡≤¢‡ºΩ",
    "‡ºº ‡ºé‡∫∂ ‡∑¥ ‡ºé‡∫∂‡ºΩ",
]

SLAP_TEMPLATES = [
    "{victim} kullanƒ±cƒ±sƒ±nƒ± {item} ile {hits} .",
    "{victim} kullanƒ±cƒ±sƒ±nƒ± {item} ile y√ºz√ºne {hits} .",
    "{victim} kullanƒ±cƒ±sƒ±nƒ± {item} ile biraz {hits} .",
    "{victim} kullanƒ±cƒ±sƒ±na {item} {throws} .",
    "{victim} kullanƒ±cƒ±sƒ±nƒ± {item} ile y√ºz√ºne {throws} .",
    "{victim} kullanƒ±cƒ±sƒ±na doƒüru {item} fƒ±rlatƒ±yor.",
    "{victim} aptalƒ±na {item} ile tokat atƒ±yor.",
    "{victim} kullanƒ±cƒ±sƒ±nƒ± yere sabitleyƒ±p ardƒ± ardƒ±na {item} ile {hits} .",
    "{item} alarak {victim} {hits}.",
    "{victim} kullanƒ±cƒ±sƒ±nƒ± sandalyeye baƒülayƒ±p {item} {throws} .",
    "{victim} kullanƒ±cƒ±sƒ±nƒ± arkada≈üca ittirerek lavda y√ºzmeyi √∂ƒürenmesini saƒülƒ±yor."
]

ITEMS = [
    "demir tencere",
    "b√ºy√ºk alabalƒ±k",
    "beyzbol sopasƒ±",
    "kriket sopasƒ±",
    "tahta baston",
    "√ßivi",
    "yazƒ±cƒ±",
    "k√ºrek",
    "t√ºpl√º monit√∂r",
    "fizik defteri",
    "tost makinasƒ±",
    "Richard Stallman'ƒ±n portresi",
    "televizyon",
    "be≈ü ton kamyon",
    "koli bandƒ±",
    "kitap",
    "diz√ºst√º bilgisayar",
    "eski televizyon",
    "kayalƒ± √ßuval",
    "g√∂kku≈üaƒüƒ± alabalƒ±ƒüƒ±",
    "plastik tavuk",
    "√ßivili sopa",
    "yangƒ±n s√∂nd√ºr√ºc√º",
    "aƒüƒ±r ta≈ü",
    "kir yƒ±ƒüƒ±nƒ±",
    "arƒ± kovanƒ±",
    "√ß√ºr√ºk et par√ßasƒ±",
    "ayƒ±",
    "tonlarca tuƒüla",
]

THROW = [
    "atƒ±yor",
    "fƒ±rlatƒ±yor",
    "savuruyor",
    "yaƒüdƒ±rƒ±yor",
]

HIT = [
    "vuruyor",
    "sert vuruyor",
    "tokatlƒ±yor",
    "yumrukluyor",
    "ge√ßiriyor",
]

# ===========================================
@register(outgoing=True, pattern="^.karar$")
async def karar(e):
    msaj = ""
    if e.reply_to_msg_id:
        rep = await e.get_reply_message()
        replyto = rep.id
        msaj += f"[Dostum](tg://user?id={rep.from_id}), "
    else:
        e.edit("`L√ºtfen bir mesaja yanƒ±t verin`")
        return
    yesno = requests.get('https://yesno.wtf/api').json()
    if yesno["answer"] == "yes":
        cevap = "evet"
    else:
        cevap = "hayƒ±r"
    msaj += f"Sanƒ±rƒ±m buna {cevap} diyeceƒüim."

    await e.delete()
    await e.client.send_message(
        e.chat_id,
        msaj,
        reply_to=replyto,
        file=yesno["image"]
    )

@register(outgoing=True, pattern=r"^.(\w+)say (.*)")
async def univsaye(cowmsg):
    """ .cowsay komutu bir ≈üeyler s√∂yleyen inek yapar """
    arg = cowmsg.pattern_match.group(1).lower()
    text = cowmsg.pattern_match.group(2)

    if arg == "cow":
        arg = "default"
    if arg not in cow.COWACTERS:
        return
    cheese = cow.get_cow(arg)
    cheese = cheese()

    await cowmsg.edit(f"`{cheese.milk(text).replace('`', '¬¥')}`")


@register(outgoing=True, pattern="^:/$", ignore_unsafe=True)
async def kek(keks):
    """ Kendinizi kontrol edin ;)"""
    uio = ["/", "\\"]
    for i in range(1, 15):
        time.sleep(0.3)
        await keks.edit(":" + uio[i % 2])


@register(pattern="^.slap(?: |$)(.*)", outgoing=True)
async def who(event):
    """ Hedeflenen kullanƒ±cƒ±ya tokat atar. """
    replied_user = await get_user_from_event(event)
    if replied_user:
        replied_user = replied_user[0]
    else:
        return
    caption = await slap(replied_user, event)

    try:
        await event.edit(caption)

    except BaseException:
        await event.edit(
            "`Bu ki≈üiyi tokatlayamam, yanƒ±ma sopa ve ta≈ü almam gerekecek !!`"
        )


async def slap(replied_user, event):
    """ Tokat atarken komik c√ºmle kur !! """
    user_id = replied_user.id
    first_name = replied_user.first_name
    username = replied_user.username

    if username:
        slapped = "@{}".format(username)
    else:
        slapped = f"[{first_name}](tg://user?id={user_id})"

    temp = choice(SLAP_TEMPLATES)
    item = choice(ITEMS)
    hit = choice(HIT)
    throw = choice(THROW)

    caption = "Seden " + temp.format(
        victim=slapped, item=item, hits=hit, throws=throw)

    return caption

@register(outgoing=True, pattern="^.hava")
async def _(event):
    if event.fwd_from:
        return
    deq = deque(list("‚òÄÔ∏èüå§‚õÖÔ∏èüå•‚òÅÔ∏èüå¶üåßüå©üå®‚ùÑÔ∏è"))
    for _ in range(48):
        await asyncio.sleep(0.1)
        await event.edit("".join(deq))
        deq.rotate(1)

@register(outgoing=True, pattern="^-_-$", ignore_unsafe=True)
async def lol(lel):
    """ Tamam... """
    okay = "-_-"
    for i in range(10):
        okay = okay[:-1] + "_-"
        await lel.edit(okay)


@register(outgoing=True, pattern="^;_;$", ignore_unsafe=True)
async def fun(e):
    t = ";_;"
    for j in range(10):
        t = t[:-1] + "_;"
        await e.edit(t)


@register(outgoing=True, pattern="^.fp$")
async def facepalm(e):
    """ Utanmak  ü§¶‚Äç‚ôÇ """
    await e.edit("ü§¶‚Äç‚ôÇ")


@register(outgoing=True, pattern="^.cry$")
async def cry(e):
    """ bunu yaparsan, her zaman aƒülarƒ±m !! """
    await e.edit(choice(CRI))

@register(outgoing=True, pattern="^.silah$")
async def silah(event):
    if event.fwd_from:
        return
    animation_interval = 0.3
    animation_ttl = range(0, 12)
    await event.edit("Sniper")
    animation_chars = [
            "Ô∏ª„Éá‚ïê‰∏Ä-",
            "Ô∏ª„Éá‚ïê‰∏Ä -",
            "Ô∏ª„Éá‚ïê‰∏Ä  -",
            "Ô∏ª„Éá‚ïê‰∏Ä   -",
            "Ô∏ª„Éá‚ïê‰∏Ä    -",    
            "Ô∏ª„Éá‚ïê‰∏Ä     -",
            "Ô∏ª„Éá‚ïê‰∏Ä      -",
            "Ô∏ª„Éá‚ïê‰∏Ä       -",
            "Ô∏ª„Éá‚ïê‰∏Ä        -",
            "Ô∏ª„Éá‚ïê‰∏Ä          -",
            "Ô∏ª„Éá‚ïê‰∏Ä           -",
            "üî™√ñLD√úN √áIKüî™"
 ]
    for i in animation_ttl:
        await asyncio.sleep(animation_interval)
        await event.edit(animation_chars[i % 12])


@register(outgoing=True, pattern="^.cp(?: |$)(.*)")
async def copypasta(cp_e):
    """ copypasta """
    textx = await cp_e.get_reply_message()
    message = cp_e.pattern_match.group(1)

    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await cp_e.edit("`üòÇBanaüíØBIR‚úåÔ∏èmEüÖ±Ô∏èInüëêVerüëè`")
        return

    reply_text = choice(EMOJIS)
    b_char = choice(message).lower()
    for owo in message:
        if owo == " ":
            reply_text += choice(EMOJIS)
        elif owo in EMOJIS:
            reply_text += owo
            reply_text += choice(EMOJIS)
        elif owo.lower() == b_char:
            reply_text += "üÖ±Ô∏è"
        else:
            if bool(getrandbits(1)):
                reply_text += owo.upper()
            else:
                reply_text += owo.lower()
    reply_text += choice(EMOJIS)
    await cp_e.edit(reply_text)


@register(outgoing=True, pattern="^.vapor(?: |$)(.*)")
async def vapor(vpr):
    """ Her ≈üeyi vaporla≈ütƒ±rƒ±n! """
    reply_text = []
    textx = await vpr.get_reply_message()
    message = vpr.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await vpr.edit("`Ôº¢ÔΩÅÔΩéÔΩÅ ÔΩÇÔΩâÔΩí ÔΩçÔΩÖÔΩîÔΩâÔΩé ÔΩñÔΩÖÔΩí!`")
        return

    for charac in message:
        if 0x21 <= ord(charac) <= 0x7F:
            reply_text.append(chr(ord(charac) + 0xFEE0))
        elif ord(charac) == 0x20:
            reply_text.append(chr(0x3000))
        else:
            reply_text.append(charac)

    await vpr.edit("".join(reply_text))


@register(outgoing=True, pattern="^.str(?: |$)(.*)")
async def stretch(stret):
    """ Mesajƒ± iyice uzatƒ±n."""
    textx = await stret.get_reply_message()
    message = stret.text
    message = stret.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await stret.edit("`Baaaaanaaaaa biiiiir meeeeetiiiiin veeeeer!`")
        return

    count = randint(3, 10)
    reply_text = sub(r"([aeiouAEIOUÔΩÅÔΩÖÔΩâÔΩèÔΩïÔº°Ôº•Ôº©ÔºØÔºµ–∞–µ–∏–æ—É—é—è—ã—ç—ë])", (r"\1" * count),
                     message)
    await stret.edit(reply_text)


@register(outgoing=True, pattern="^.zal(?: |$)(.*)")
async def zal(zgfy):
    """ Kaos duygusunu √ßaƒüƒ±rƒ±n. """
    reply_text = []
    textx = await zgfy.get_reply_message()
    message = zgfy.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await zgfy.edit(
            "`Ôº¢Õ¨Ã∫ÔΩÅÕëÃ†ÔΩéÃµÃâÔΩÅÃ¨Õú ÔΩÇÕîÃ∂ÔΩâÃºÕöÔΩíÕàÕû ÔΩçÃºÕòÔΩÖÃ®ÃùÔΩîÕîÕôÔΩâÕÆÃ¢ÔΩéÃúÕó ÔΩñÕ¢ÕúÔΩÖÕêÃóÔΩíÕÆÃ¥`"
        )
        return

    for charac in message:
        if not charac.isalpha():
            reply_text.append(charac)
            continue

        for _ in range(0, 3):
            charac += choice(ZALG_LIST[randint(0,2)]).strip()

        reply_text.append(charac)

    await zgfy.edit("".join(reply_text))
    

@register(outgoing=True, pattern="^.hi$")
async def hoi(hello):
    """ Herkesi selamlayƒ±n """
    await hello.edit(choice(HELLOSTR))


@register(outgoing=True, pattern="^.owo(?: |$)(.*)")
async def faces(owo):
    """ UwU """
    textx = await owo.get_reply_message()
    message = owo.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await owo.edit("` UwU bana bir metin ver! `")
        return

    reply_text = sub(r"(r|l)", "w", message)
    reply_text = sub(r"(R|L)", "W", reply_text)
    reply_text = sub(r"n([aeiou])", r"ny\1", reply_text)
    reply_text = sub(r"N([aeiouAEIOU])", r"Ny\1", reply_text)
    reply_text = sub(r"\!+", " " + choice(UWUS), reply_text)
    reply_text = reply_text.replace("ove", "uv")
    reply_text += " " + choice(UWUS)
    await owo.edit(reply_text)


@register(outgoing=True, pattern="^.react$")
async def react_meme(react):
    """ UserBot'un her ≈üeye tepki vermesini saƒülayƒ±n. """
    await react.edit(choice(FACEREACTS))


@register(outgoing=True, pattern="^.shg$")
async def shrugger(shg):
    r""" ¬Ø\_(„ÉÑ)_/¬Ø """
    await shg.edit(choice(SHGS))


@register(outgoing=True, pattern="^.run$")
async def runner_lol(run):
    await run.edit(choice(RUNS_STR))


@register(outgoing=True, pattern="^oof$")
async def oof(e):
    t = "oof"
    for j in range(16):
        t = t[:-1] + "of"
        await e.edit(t)

                      
@register(outgoing=True, pattern="^Oof$")
async def Oof(e):
    t = "Oof"
    for j in range(16):
        t = t[:-1] + "of"
        await e.edit(t)


@register(outgoing=True, pattern="^skrrt$")
async def oof(e):
    t = "skrrt"
    for j in range(16):
        t = t[:-1] + "rt"
        await e.edit(t)
        

@register(outgoing=True, pattern="^Skrrt$")
async def oof(e):
    t = "Skrrt"
    for j in range(16):
        t = t[:-1] + "rt"
        await e.edit(t)


@register(outgoing=True, pattern="^.fuk")
async def fuk(event):
    if event.fwd_from:
        return
    animation_interval = 0.1
    animation_ttl = range(0, 101)
    animation_chars = [
            "üçÜ       üçëÔ∏è",
            "üçÜ     üçëÔ∏è",
            "üçÜ  üçëÔ∏è",
            "üçÜüçëÔ∏èüí¶"
    ]
    for i in animation_ttl:
        await asyncio.sleep(animation_interval)
        await event.edit(animation_chars[i % 4])

                      
@register(outgoing=True, pattern="^.otuzbir")
async def otuzbir(event):
    if event.fwd_from:
        return
                      
    animation_interval = 0.3
    animation_ttl = range(0, 12)
    await event.edit("31 √áekiorm Lna")
    animation_chars = [
            "8=üëä====D",
            "8==üëä===D",
            "8===üëä==D",
            "8====üëä=D",
            "8=====üëäD",    
            "8====üëä=D",
            "8===üëä==D",
            "8==üëä===D",
            "8=üëä====D",
            "8üëä=====D",
            "Ohh",
            "üí¶"
 ]

    for i in animation_ttl:

        await asyncio.sleep(animation_interval)

        await event.edit(animation_chars[i % 12])

@register(outgoing=True, pattern="^.kalp (.*)")
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    deq = deque(list("Ô∏è‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§"))
    for _ in range(32):
        await asyncio.sleep(0.1)
        await event.edit("".join(deq))
        deq.rotate(1)
    await event.edit("‚ù§Ô∏èüß°üíõ" + input_str + "üíöüíôüíúüñ§")


@register(outgoing=True, pattern="^.10iq$")
async def iqless(e):
    await e.edit(
    "D√ú√ú√úT D√ú√ú√úTT A√á YOLU A√á√á HADƒ∞ ASLAN PAR√áASI YOLU A√á \n"
    "HADƒ∞ BAK ENGELLƒ∞ BEKLƒ∞YO BURDA HADƒ∞ D√ú√ú√úTTT ‚ôøÔ∏è BAK \n"
    "Sƒ∞Nƒ∞RLENDƒ∞ ARKADA≈û HADƒ∞ YOLU A√á HADƒ∞ƒ∞ D√ú√ú√úT D√ú√úTT Bƒ∞ƒ∞ƒ∞PP \n"
    "HADƒ∞ BE HIZLI OLL D√ú√ú√úTT Bƒ∞ƒ∞ƒ∞PPP ‚ôøÔ∏è‚ôøÔ∏è BAK HIZLANDI ENGELLƒ∞ \n"
    "KARDE≈ûƒ∞Mƒ∞Z SERƒ∞ K√ñZ GETƒ∞R SERƒ∞ D√ú√ú√úTT D√ú√ú√úT D√ú√ú√ú√úTTTTT \n"
    "Bƒ∞ƒ∞ƒ∞ƒ∞PPP Bƒ∞ƒ∞ƒ∞ƒ∞ƒ∞PPP D√ú√ú√úTTT ‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è BAK ARTIYO SAYILARI \n"
    "A√áTIN MI YOLU A√áMADIN P√ú√ú√ú√ú REZƒ∞ƒ∞ƒ∞LL D√ú√ú√ú√úTTT ‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è \n"
    "‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è BAK KALABALIKLASTI BAK DELI GELIYOR DELIRDI DELI \n"
    "AC YOLU DUTDUTDURURURUDUTTT‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è \n"
    "‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏èKAFAYI YEDI BUNLAR AC LAAAAN YOLU"
    )
    
    
@register(outgoing=True, pattern="^.mizah$")
async def mizahshow(e):
    await e.edit(
    "‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èMmMmMmMizahh ≈ûowwüò®üò®üò®üò®üò±üò±üò±üò±üò± \n"
    "üò±üò±‚ö†Ô∏è‚ö†Ô∏è üòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüò±üòµ \n"
    "üòÇüòÇüëçüëçüëçüëçüëçüëçüëçüëçüëçüëçüëçüëçüëç MiZah \n"
    "≈ûeLaLesNdEn b1r yUdm aLdƒ±m‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è \n"
    "AHAHAHAHAHAHHAHAHAHAHAHAHAHAHAHAHAHHAHAHAHAHA \n"
    "HAHAHAHAHAHAHHAHAHAHAHAHAHAüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇ \n"
    "üòÇ KOMƒ∞K LAN KOMƒ∞ƒ∞ƒ∞K \n"
    "heLaL LaN ‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏èüëèüëèüëèüëèüëèüëèüëèüëè \n"
    "üëè EfSaNe mMmMiZah ≈üooooovv üëèüëèüëèüëèüëèüòÇüòÇüòÇüòÇ \n"
    "üòÇüòÇüòÇüòÇüòÇüòÇ‚ö†Ô∏è \n"
    "üíØüíØüíØüíØüíØüíØüíØüíØüíØ \n"
    "KNK AYNI Bƒ∞ƒ∞ƒ∞Z üòÇüòÇüòÇüëèüëè \n"
    "üíØüíØ‚ö†Ô∏è‚ö†Ô∏è‚ôøÔ∏èA√á YOLU POST SAHƒ∞Bƒ∞ VE ONU ‚ôøÔ∏èSAVUNANLAR \n"
    "GELIYOR ‚ôøÔ∏è‚ôøÔ∏è D√ú√úTT‚ôøÔ∏è \n"
    "D√ú√ú√ú√úT‚ôøÔ∏èD√ú√úT‚ôøÔ∏èüíØüíØ‚ö†Ô∏è \n"
    "‚ôøÔ∏èKOMƒ∞ƒ∞ƒ∞K ‚ôøÔ∏è \n"
    "CJWJCJWJXJJWDJJQUXJAJXJAJXJWJFJWJXJAJXJWJXJWJFIWIXJQJJQJASJAXJ \n"
    "AJXJAJXJJAJXJWJFWJJFWIIFIWICIWIFIWICJAXJWJFJEICIIEICIEIFIWICJSXJJS \n"
    "CJEIVIAJXBWJCJIQICIWJXüíØüíØüíØüíØüíØüíØüòÇüòÇüòÇüòÇüòÇüòÇüòÇ \n"
    "üòÇ‚ö†Ô∏èüòÇüòÇüòÇüòÇüòÇüòÇ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èüòÇüòÇüòÇüòÇ‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏èüòÖüòÖ \n"
    "üòÖüòÇüëèüíØ‚ö†Ô∏èüëè‚ôøÔ∏èüö®"
    )    


@register(outgoing=True, pattern="^.moon$")
async def moon(event):
    deq = deque(list("üåóüåòüåëüåíüåìüåîüåïüåñ"))
    try:
        for x in range(32):
            await sleep(0.1)
            await event.edit("".join(deq))
            deq.rotate(1)
    except BaseException:
        return


@register(outgoing=True, pattern="^.clock$")
async def clock(event):
    deq = deque(list("üïôüïòüïóüïñüïïüïîüïìüïíüïëüïêüïõ"))
    try:
        for x in range(32):
            await sleep(0.1)
            await event.edit("".join(deq))
            deq.rotate(1)
    except BaseException:
        return


@register(outgoing=True, pattern="^.mock(?: |$)(.*)")
async def spongemocktext(mock):
    """ Yap ve ger√ßek eƒülenceyi bul. """
    reply_text = []
    textx = await mock.get_reply_message()
    message = mock.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await mock.edit("`bANa bIr mETin vEr!`")
        return

    for charac in message:
        if charac.isalpha() and randint(0, 1):
            to_app = charac.upper() if charac.islower() else charac.lower()
            reply_text.append(to_app)
        else:
            reply_text.append(charac)

    await mock.edit("".join(reply_text))


@register(outgoing=True, pattern="^.clap(?: |$)(.*)")
async def claptext(memereview):
    """ ƒ∞nsanlarƒ± √∂v√ºn! """
    textx = await memereview.get_reply_message()
    message = memereview.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await memereview.edit("`Hah, anlamƒ± olmadan alkƒ±≈ülamƒ±yorum!`")
        return
    reply_text = "üëè "
    reply_text += message.replace(" ", " üëè ")
    reply_text += " üëè"
    await memereview.edit(reply_text)


@register(outgoing=True, pattern=r"^.f (.*)")
async def payf(event):
    paytext = event.pattern_match.group(1)
    pay = "{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}".format(
        paytext * 8, paytext * 8, paytext * 2, paytext * 2, paytext * 2,
        paytext * 6, paytext * 6, paytext * 2, paytext * 2, paytext * 2,
        paytext * 2, paytext * 2)
    await event.edit(pay)


@register(outgoing=True, pattern="^.lfy (.*)")
async def let_me_google_that_for_you(lmgtfy_q):
    textx = await lmgtfy_q.get_reply_message()
    qry = lmgtfy_q.pattern_match.group(1)
    if qry:
        query = str(qry)
    elif textx:
        query = textx
        query = query.message
    query_encoded = query.replace(" ", "+")
    lfy_url = f"http://lmgtfy.com/?s=g&iie=1&q={query_encoded}"
    payload = {'format': 'json', 'url': lfy_url}
    r = requests.get('http://is.gd/create.php', params=payload)
    await lmgtfy_q.edit(f"ƒ∞≈üte, keyfine bak.\
    \n[{query}]({r.json()['shorturl']})")


@register(pattern=r".scam(?: |$)(.*)", outgoing=True)
async def scam(event):
    """ Sahte sohbet eylemleri i√ßin k√º√ß√ºk bir komut !! """
    options = [
        'typing', 'contact', 'game', 'location', 'voice', 'round', 'video',
        'photo', 'document', 'cancel'
    ]
    input_str = event.pattern_match.group(1)
    args = input_str.split()
    if len(args) is 0:
        scam_action = choice(options)
        scam_time = randint(30, 60)
    elif len(args) is 1:
        try:
            scam_action = str(args[0]).lower()
            scam_time = randint(30, 60)
        except ValueError:
            scam_action = choice(options)
            scam_time = int(args[0])
    elif len(args) is 2:
        scam_action = str(args[0]).lower()
        scam_time = int(args[1])
    else:
        await event.edit("`Invalid Syntax !!`")
        return
    try:
        if (scam_time > 0):
            await event.delete()
            async with event.client.action(event.chat_id, scam_action):
                await sleep(scam_time)
    except BaseException:
        return


@register(pattern=r".type(?: |$)(.*)", outgoing=True)
async def typewriter(typew):
    """ Klavyenizi daktilo haline getirmek i√ßin k√º√ß√ºk bir komut! """
    textx = await typew.get_reply_message()
    message = typew.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await typew.edit("`Bana bir metin ver!`")
        return
    sleep_time = 0.03
    typing_symbol = "|"
    old_text = ""
    await typew.edit(typing_symbol)
    await sleep(sleep_time)
    for character in message:
        old_text = old_text + "" + character
        typing_text = old_text + "" + typing_symbol
        await typew.edit(typing_text)
        await sleep(sleep_time)
        await typew.edit(old_text)
        await sleep(sleep_time)


CMD_HELP.update({
    "memes":
    ".cowsay\
\nKullanƒ±m: bir ≈üeyler s√∂yleyen inek.\
\n\n:/\
\nKullanƒ±m: Kendinizi kontrol edin ;)\
\n\n.karar\
\nKullanƒ±m: Karar verin.\
\n\n-_-\
\nKullanƒ±m: Tamam...\
\n\n;_;\
\nKullanƒ±m: `-_-` gibi ama aƒülƒ±yor.\
\n\n.cp\
\nKullanƒ±m: Me≈ühur copypasta mod√ºl√º\
\n\n.vapor\
\nKullanƒ±m: Her ≈üeyi vaporla≈ütƒ±rƒ±n!\
\n\n.str\
\nKullanƒ±m: Mesajƒ± iyice uzatƒ±n.\
\n\n.10iq\
\nKullanƒ±m: Aptallƒ±k seviyenizi √∂l√ß√ºn !!\
\n\n.mizah\
\nKullanƒ±m: Aptallƒ±k seviyenizi √∂l√ß√ºn !!\
\n\n.zal\
\nKullanƒ±m: Kaos duygusunu √ßaƒüƒ±rƒ±n.\
\n\noof\
\nKullanƒ±m: ooooof\
\n\nskrrt\
\nKullanƒ±m: skrrrrt\
\n\n.fuk\
\nKullanƒ±m: ¬Ø\_(„ÉÑ)_/¬Ø\
\n\n.kalp\
\nKullanƒ±m: Sevginizi g√∂sterin.\
\n\n.fp\
\nKullanƒ±m: Utanmak  ü§¶‚Äç‚ôÇ\
\n\n.moon\
\nKullanƒ±m: Ay animasyonu.\
\n\n.clock\
\nKullanƒ±m: Saat animasyonu.\
\n\n.hi\
\nKullanƒ±m: Herkesi selamlayƒ±n!\
\n\n.owo\
\nKullanƒ±m: UwU\
\n\n.react\
\nKullanƒ±m: UserBot'un her ≈üeye tepki vermesini saƒülayƒ±n.\
\n\n.slap\
\nKullanƒ±m: rastgele nesnelerle tokatlamak i√ßin mesaja cevap verin !!\
\n\n.cry\
\nKullanƒ±m: bunu yaparsan, her zaman aƒülarƒ±m.\
\n\n.shg\
\nKullanƒ±m: ¬Ø\_(„ÉÑ)_/¬Ø\
\n\n.run\
\nKullanƒ±m: UserBot'un ko≈ümasƒ±nƒ± saƒülar!\
\n\n.mock\
\nKullanƒ±m: Yap ve ger√ßek eƒülenceyi bul.\
\n\n.clap\
\nKullanƒ±m: ƒ∞nsanlarƒ± √∂v√ºn!\
\n\n.f <emoji/karakter>\
\nKullanƒ±m: Saygƒ±lar..\
\n\n.type\
\nKullanƒ±m: Klavyenizi daktilo haline getirmek i√ßin k√º√ß√ºk bir komut!\
\n\n.lfy <sorgu>\
\nKullanƒ±m: Bƒ±rakƒ±n Google bunu sizin i√ßin ara≈ütƒ±rsƒ±n.\
\n\n.scam <eylem> <s√ºre>\
\n[Mevcut eylemler: (typing, contact, game, location, voice, round, video, photo, document, cancel)]\
\nKullanƒ±m: Create fake chat actions, for fun. (Varsayƒ±lan eylem: typing)\
\n\n\nBunlardan bazƒ±larƒ± i√ßin te≈üekk√ºrler üÖ±Ô∏èottomüÖ±Ô∏èextüÖ±Ô∏èot (@NotAMemeBot).\
\n\nUyarlamalar i√ßin te≈üekk√ºrler @NaytSeyd"
})
